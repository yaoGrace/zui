import{_ as s,c as i,o as a,R as n}from"./chunks/framework.DkhUyr1-.js";const y=JSON.parse('{"title":"Cash（jQuery）扩展","description":"","frontmatter":{},"headers":[],"relativePath":"lib/basic/core/cash.md","filePath":"lib/basic/core/cash.md","lastUpdated":null}'),l={name:"lib/basic/core/cash.md"},h=n(`<h1 id="cash-jquery-扩展" tabindex="-1">Cash（jQuery）扩展 <a class="header-anchor" href="#cash-jquery-扩展" aria-label="Permalink to &quot;Cash（jQuery）扩展&quot;">​</a></h1><p>在 ZUI3 一些 JS 组件依赖了 <a href="https://github.com/fabiospampinato/cash" target="_blank" rel="noreferrer">Cash</a>，这是一个轻量级的 jQuery 替代品，它的 API 与 jQuery 保持一致，但体积更小，性能更好。需要注意的是 Cash 与 jQuery 存在一些差异，详情参考 <a href="https://github.com/fabiospampinato/cash/blob/master/docs/migration_guide.md" target="_blank" rel="noreferrer">Migration Guide</a>。</p><h2 id="cash-组件调用方式" tabindex="-1">Cash 组件调用方式 <a class="header-anchor" href="#cash-组件调用方式" aria-label="Permalink to &quot;Cash 组件调用方式&quot;">​</a></h2><p>为了方便手动构造、调用组件，增加了一系列 jQuery 风格的方法。</p><h3 id="获取组件实例-fn-zui" tabindex="-1">获取组件实例 <code>$.fn.zui</code> <a class="header-anchor" href="#获取组件实例-fn-zui" aria-label="Permalink to &quot;获取组件实例 \`$.fn.zui\`&quot;">​</a></h3><p><strong>定义：</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 获取元素上的找到的最后一个组件实例。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 获取元素上的找到的所有组件实例。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 获取元素上指定名称的最后一个组件实例，当前元素没有对应实例时，自动向父级元素查找，直到找到。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(componentName);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 当元素上被初始化了多个同名组件实例的情况下，获取元素上指定名称的最后一个符合特定 key 组件实例，当前元素没有对应实例时，自动向父级元素查找，直到找到。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(componentName, key);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 当元素上被初始化了多个同名组件实例的情况下，获取所有指定名称的组件实例。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(componentName, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>举例：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 获取 picker 实例。 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> picker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#myPicker&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;picker&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 执行重新渲染。 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">picker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({items: newItems, name: newName});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 修改 picker 的当前值。 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">picker.$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;newValue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 销毁组件。 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">picker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="初始化组件实例或调用组件方法" tabindex="-1">初始化组件实例或调用组件方法 <a class="header-anchor" href="#初始化组件实例或调用组件方法" aria-label="Permalink to &quot;初始化组件实例或调用组件方法&quot;">​</a></h3><p><strong>定义：</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 无选项形式在元素上初始化一个组件。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">componentName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 指定选项在元素上初始化一个组件。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">componentName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 当元素上已经有被初始化的组件，则会使用选项调用 render 方法。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">componentName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderOptions);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 调用组件实例上的方法，或者组件实例 $ 对象上的方法。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">componentName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(methodName);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 调用组件实例上的方法并指定方法参数。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selector).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">componentName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(methodName, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args);</span></span></code></pre></div><p><strong>举例：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 在 #myColor 上初始化 color */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#myColor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">colorPicker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 在 #myPicker 上使用选项初始化 picker */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#myPicker&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">picker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;product&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, items: productItems});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 重新渲染修改 items。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#myPicker&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">picker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({items: newProductItems});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 调用实例 $.setValue 方法。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#myPicker&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">picker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setValue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, newValue);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 调用 destroy 方法销毁组件。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#myPicker&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">picker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;destroy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 综合使用：初始化 datePicker 并获取实例。 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> datePicker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#myDate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">datePicker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({defaultValue: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;today&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 修改 placeholder 和类名。 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">datePicker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({placeholder: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入日期&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, className: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;has-error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 设置值。 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">datePicker.$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2023-07-13&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 销毁。 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">datePicker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="辅助方法" tabindex="-1">辅助方法 <a class="header-anchor" href="#辅助方法" aria-label="Permalink to &quot;辅助方法&quot;">​</a></h2><h3 id="fn-resize-监听元素尺寸变化" tabindex="-1"><code>$.fn.resize()</code> 监听元素尺寸变化 <a class="header-anchor" href="#fn-resize-监听元素尺寸变化" aria-label="Permalink to &quot;\`$.fn.resize()\` 监听元素尺寸变化&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">定义：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$.fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callback: ResizeObserverCallback): ResizeObserver;</span></span></code></pre></div><p><strong>参数</strong>：</p><ul><li><code>callback</code>：回调函数，定义为 <code>(entries: ResizeObserverEntry[], observer: ResizeObserver): void;</code>。</li></ul><p><strong>返回值</strong>：<code>ResizeObserver</code>：<a href="https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver" target="_blank" rel="noreferrer">ResizeObserver</a> 对象。</p></div>`,17),e=[h];function p(k,t,r,E,d,c){return a(),i("div",null,e)}const o=s(l,[["render",p]]);export{y as __pageData,o as default};
